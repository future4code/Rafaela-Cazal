{"version":3,"sources":["components/DeletePlaylistItem/index.js","components/GetAllPlaylists/index.js","components/CreatePlaylists/index.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","DeletePlaylistItem","aoClicarDelete","url","props","lista","id","axios","delete","headers","auth","then","onClickDelete","catch","error","alert","this","name","onClick","Component","GetAllPlaylists","getAllPlaylist","get","response","setState","playlists","data","result","list","state","map","React","token","CreatePlaylists","createNewPlaylist","playlistName","post","onPlaylistNameChange","event","target","value","type","onChange","placeholder","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAGMA,EAAU,qDAEKC,E,2MAElBC,eAAiB,WACd,IAAMC,EAAG,UAAMH,EAAN,gDAAqD,EAAKI,MAAMC,MAAMC,IAG/EC,IAAMC,OAAOL,EAAK,CACfM,QAAS,CACNC,KAJQ,eAMXC,MAAK,WACL,EAAKP,MAAMQ,mBACXC,OAAM,SAAAC,GACNC,MAAM,qC,wEAKT,OACG,6BACG,4BACIC,KAAKZ,MAAMC,MAAMY,KADrB,IAC4B,IACzB,4BAAQC,QAASF,KAAKd,gBAAtB,W,GAtBiCiB,aCA1CnB,EAAU,qDAGKoB,E,YAClB,WAAYhB,GAAQ,IAAD,8BAChB,4CAAMA,KAUTiB,eAAiB,WACd,IAAMlB,EAAG,UAAMH,EAAN,8BAGOO,IAAMe,IAAInB,EAAK,CAC5BM,QAAS,CACNC,KAJQ,eAQNC,MAAK,SAACY,GACX,EAAKC,SAAS,CAAEC,UAAWF,EAASG,KAAKC,OAAOC,WApBnD,EAAKC,MAAQ,CACVJ,UAAW,IAHE,E,iFAQhBT,KAAKK,mB,2CAmBLL,KAAKK,mB,+BAGE,IAAD,OACN,OACG,6BACG,iDACCL,KAAKa,MAAMJ,UAAUK,KAAI,SAAAb,GAAI,OAAK,kBAAC,EAAD,CAAoBZ,MAAOY,EAAML,cAAe,EAAKS,yB,GAnCvDU,IAAMZ,WCJ7CnB,EAAU,qDACVgC,EAAQ,YAGOC,E,YACnB,WAAY7B,GAAQ,IAAD,8BAChB,4CAAMA,KAMT8B,kBAAoB,WACjB,IAAM/B,EAAG,UAAMH,EAAN,6BACH0B,EAAO,CACVT,KAAM,EAAKY,MAAMM,cAGpB5B,IAAM6B,KAAKjC,EAAKuB,EAAM,CACnBjB,QAAS,CACNC,KAAMsB,KAIZ,EAAKR,SAAS,CAAEW,aAAc,MAnBd,EAuBnBE,qBAAuB,SAAAC,GACpB,EAAKd,SAAS,CAACW,aAAcG,EAAMC,OAAOC,SAtB1C,EAAKX,MAAQ,CACVM,aAAc,IAHD,E,sEA4BhB,OACG,6BACG,iDACA,2BAAOM,KAAK,OAAOC,SAAU1B,KAAKqB,qBAAsBG,MAAOxB,KAAKa,MAAMM,aAAcQ,YAAY,SAEpG,4BAAQzB,QAASF,KAAKkB,mBAAtB,uB,GAlCkCH,IAAMZ,WCD9ByB,E,YACnB,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,MAAQ,GAFI,E,sEAOjB,OACE,yBAAKgB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAX2B1B,aCKb2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.dc62f2b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst baseURL = \"https://us-central1-spotif4.cloudfunctions.net/api\";\n\nexport default class DeletePlaylistItem extends Component {  \n\n   aoClicarDelete = () => {      \n      const url = `${baseURL}/playlists/deletePlaylist?playlistId=${this.props.lista.id}`;\n      const token = \"rafacazal\";\n\n      axios.delete(url, {\n         headers: {\n            auth: token,\n         }\n      }).then(() => {\n         this.props.onClickDelete();\n      }).catch(error => {\n         alert(\"playlist nao pode ser apagada\")\n      })\n   };\n\n   render() {\n      return (\n         <div>\n            <li>\n               {this.props.lista.name} {\" \"}\n               <button onClick={this.aoClicarDelete}>X</button>\n            </li>\n         </div>\n      )\n   };\n}","import React  from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport DeletePlaylistItem from '../DeletePlaylistItem';\r\n\r\nconst baseURL = \"https://us-central1-spotif4.cloudfunctions.net/api\";\r\nconst token = \"rafacazal\"\r\n\r\nexport default class GetAllPlaylists extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         playlists: [],\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.getAllPlaylist();\r\n   }\r\n\r\n   getAllPlaylist = () => {\r\n      const url = `${baseURL}/playlists/getAllPlaylists`;\r\n      const token = \"rafacazal\";\r\n\r\n      const request = axios.get(url, {\r\n         headers: {\r\n            auth: token,\r\n         }\r\n      });\r\n\r\n      request.then((response) => {\r\n         this.setState({ playlists: response.data.result.list })\r\n      });\r\n   }\r\n\r\n   componentDidUpdate() {\r\n      this.getAllPlaylist();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h3>Playlists Criadas</h3>\r\n            {this.state.playlists.map(name => (<DeletePlaylistItem lista={name} onClickDelete={this.getAllPlaylist}/>\r\n            ))}\r\n         </div>\r\n      );\r\n   }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"https://us-central1-spotif4.cloudfunctions.net/api\";\r\nconst token = \"rafacazal\";\r\n\r\n\r\nexport default class CreatePlaylists extends React.Component {\r\n  constructor(props) {\r\n     super(props);\r\n     this.state = { \r\n        playlistName: \"\",\r\n     };\r\n  };\r\n\r\n  createNewPlaylist = () => {\r\n     const url = `${baseURL}/playlists/createPlaylist`\r\n     const data = {\r\n        name: this.state.playlistName,\r\n     }\r\n\r\n     axios.post(url, data, {\r\n        headers: {\r\n           auth: token,\r\n         }\r\n     });\r\n\r\n     this.setState({ playlistName: \"\"});         \r\n  }\r\n\r\n\r\n  onPlaylistNameChange = event => {\r\n     this.setState({playlistName: event.target.value});\r\n  };\r\n\r\n  render() {\r\n     return(\r\n        <div>\r\n           <label>Nome playlist:</label>\r\n           <input type=\"text\" onChange={this.onPlaylistNameChange} value={this.state.playlistName} placeholder=\"Nome\"/>\r\n\r\n           <button onClick={this.createNewPlaylist}>Criar Playlist</button>\r\n        </div>\r\n     );\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport GetAllPlaylists from \"./components/GetAllPlaylists\";\nimport CreatePlaylists from \"./components/CreatePlaylists\";\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <GetAllPlaylists/>\n      <CreatePlaylists/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}