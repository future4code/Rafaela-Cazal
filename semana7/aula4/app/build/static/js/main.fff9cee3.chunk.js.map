{"version":3,"sources":["components/BoredGroup/index.js","components/BoredAlone/index.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","BoredGroup","props","getRandomAtividade","a","async","axios","get","response","setState","currentAtividade","data","state","currentPage","this","activity","type","participants","Component","BoredAlone","getRandomActivity","BotaoPrincipal","styled","button","App","handleChangePage","buttonText","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAIMA,EAAU,wCAwCDC,E,YArCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,mBAAqB,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAGIE,IAAMC,IAAIP,IAHd,OAGbQ,EAHa,OAKnB,EAAKC,SAAS,CAAEC,iBAAkBF,EAASG,OALxB,sCAVnB,EAAKC,MAAQ,CACXC,YAAa,aACbH,iBAAkB,IALH,E,iFAUjBI,KAAKX,uB,+BAYL,OACE,6BACE,4BACE,0CAAgBW,KAAKF,MAAMF,iBAAiBK,UAC5C,0CAAgBD,KAAKF,MAAMF,iBAAiBM,MAC5C,yEAC0C,IACtCF,KAAKF,MAAMF,iBAAiBO,aAAe,S,GA9BhCC,aCFnBlB,EAAU,wCAwCDmB,E,YArCb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAYRkB,kBAAoB,0BAAAhB,EAAAC,OAAA,kEAAAD,EAAA,MAGKE,IAAMC,IAAIP,IAHf,OAGZQ,EAHY,OAKlB,EAAKC,SAAS,CAAEC,iBAAkBF,EAASG,OALzB,sCAVlB,EAAKC,MAAQ,CACXC,YAAa,aACbH,iBAAkB,IALH,E,iFAUjBI,KAAKM,sB,+BAYL,OACE,6BACE,4BACE,0CAAgBN,KAAKF,MAAMF,iBAAiBK,UAC5C,0CAAgBD,KAAKF,MAAMF,iBAAiBM,MAC5C,wEACyC,IACrCF,KAAKF,MAAMF,iBAAiBO,aAAe,S,GA9BhCC,a,qRCAzB,IAAMG,EAAiBC,IAAOC,OAAV,KAaCC,E,YACnB,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRuB,iBAAmB,WACc,eAA3B,EAAKb,MAAMC,YACb,EAAKJ,SAAS,CAAEI,YAAa,eAE7B,EAAKJ,SAAS,CAAEI,YAAa,gBAT/B,EAAKD,MAAQ,CACXC,YAAa,WAHE,E,sEAgBjB,IAAMa,EACuB,eAA3BZ,KAAKF,MAAMC,YACP,6BACA,oCAEN,OACE,yBAAKc,UAAU,OACb,kBAACN,EAAD,CAAgBO,QAASd,KAAKW,kBAC3BC,GAEH,6BAC8B,eAA3BZ,KAAKF,MAAMC,YACV,kBAAC,EAAD,MAEA,kBAAC,EAAD,Y,GA/BqBK,aCPbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fff9cee3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"http://www.boredapi.com/api/activity/\";\r\n\r\nclass BoredGroup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentPage: \"boredGroup\",\r\n      currentAtividade: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRandomAtividade();\r\n  }\r\n\r\n  getRandomAtividade = async () => {\r\n    // Usando o axios para bater na API do BoredAPI\r\n    // no endpoint que retorna uma atividade aleatória\r\n    const response = await axios.get(baseURL);\r\n\r\n    this.setState({ currentAtividade: response.data });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <h1>Atividade: {this.state.currentAtividade.activity}</h1>\r\n          <h2>Categoria: {this.state.currentAtividade.type}</h2>\r\n          <h3>\r\n            Tédio em grupo (quantidade de pessoas):{\" \"}\r\n            {(this.state.currentAtividade.participants = 4)}\r\n          </h3>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoredGroup;","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"http://www.boredapi.com/api/activity/\";\r\n\r\nclass BoredAlone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentPage: \"boredAlone\",\r\n      currentAtividade: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRandomActivity();\r\n  }\r\n\r\n  getRandomActivity = async () => {\r\n    // Usando o axios para bater na API do BoredAPI\r\n    // no endpoint que retorna uma atividade aleatória\r\n    const response = await axios.get(baseURL);\r\n\r\n    this.setState({ currentAtividade: response.data });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <h2>Atividade: {this.state.currentAtividade.activity}</h2>\r\n          <h2>Categoria: {this.state.currentAtividade.type}</h2>\r\n          <h3>\r\n            Tédio sozinh@ (quantidade de pessoas):{\" \"}\r\n            {(this.state.currentAtividade.participants = 1)}\r\n          </h3>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoredAlone;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport BoredGroup from \"./components/BoredGroup\";\nimport BoredAlone from \"./components/BoredAlone/index\";\n\nconst BotaoPrincipal = styled.button`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  height: 4vw;\n  widht: 5vw;\n  color: white;\n  paddin: 10px;\n  margin-left: 30px;\n  margin-top:20px;\n  background-color: #202d63;\n`;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: \"inicial\"\n    };\n  }\n\n  handleChangePage = () => {\n    if (this.state.currentPage === \"boredAlone\") {\n      this.setState({ currentPage: \"boredGroup\" });\n    } else {\n      this.setState({ currentPage: \"boredAlone\" });\n    }\n  };\n\n  render() {\n    const buttonText =\n      this.state.currentPage === \"boredAlone\"\n        ? \"Sortear atividade em grupo\"\n        : \"Sortear atividade para uma pessoa\";\n\n    return (\n      <div className=\"App\">\n        <BotaoPrincipal onClick={this.handleChangePage}>\n          {buttonText}\n        </BotaoPrincipal>\n        <div>\n          {this.state.currentPage === \"boredAlone\" ? (\n            <BoredAlone />\n          ) : (\n            <BoredGroup />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}