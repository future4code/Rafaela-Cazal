{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainContainer","styled","div","ListaContainer","InputTarefa","input","ContainerDaNovaTarefa","section","App","props","onChangeTarefa","e","setState","valorTarefa","target","value","console","log","state","aoClicarAdicionar","arrayTarefasCopy","arrayTarefas","alert","type","this","onChange","placeholder","onClick","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kwBAIA,IAAMA,EAAgBC,IAAOC,IAAV,KAObC,EAAiBF,IAAOC,IAAV,KAGdE,EAAcH,IAAOI,MAAV,KAIXC,EAAwBL,IAAOM,QAAV,KAiDZC,E,YA3Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QACtCC,QAAQC,IAAI,EAAKC,MAAML,cAVN,EAanBM,kBAAoB,SAACV,GACnB,GAA8B,KAA3B,EAAKS,MAAML,YAAmB,CAC/B,IAAMO,EAAgB,sBAAO,EAAKF,MAAMG,cAAlB,CAAgCZ,IACtD,EAAKG,SAAS,CACZS,aAAcD,EACdP,YAAa,UAGfS,MAAM,mCAnBR,EAAKJ,MAAQ,CACXL,YAAa,GACbQ,aAAc,IAJC,E,sEA0BT,IAAD,OACP,OACE,kBAACrB,EAAD,KACE,gDACA,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAamB,KAAK,OAAOR,MAAOS,KAAKN,MAAML,YAAaY,SAAUD,KAAKd,eAAgBgB,YAAY,mBACnG,4BAAQC,QAASH,KAAKL,mBAAtB,cAEA,kBAACb,EAAD,KACCkB,KAAKN,MAAMG,aAAaO,KAAI,SAACnB,GAAD,OAC7B,4BAAI,gCAAS,EAAKA,MAAMI,uB,GArChBgB,IAAMC,WCXJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fce7c799.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport styled from 'styled-components';\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 500px;\n  margin-left: 400px\n`\nconst ListaContainer = styled.div`\nmargin-top: 10px;\n`\nconst InputTarefa = styled.input`\nmargin-right: 10px;\n`\n\nconst ContainerDaNovaTarefa = styled.section`\nmargin-top: 10px;\n`\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      valorTarefa: '',\n      arrayTarefas: [],\n    }\n  }\n\n  onChangeTarefa = (e) => {\n    this.setState({ valorTarefa: e.target.value })\n    console.log(this.state.valorTarefa)\n  }\n\n  aoClicarAdicionar = (props) => {\n    if(this.state.valorTarefa !== \"\"){\n      const arrayTarefasCopy = [...this.state.arrayTarefas, props]\n      this.setState({\n        arrayTarefas: arrayTarefasCopy,\n        valorTarefa: '',\n      });\n    } else {\n      alert(\"Tarefa n√£o deve ficar vazia\")\n    }\n  }\n\n\n  render() {\n    return (\n      <MainContainer>\n        <h1>Lista de Tarefas</h1>\n        <ListaContainer> \n          <InputTarefa type='text' value={this.state.valorTarefa} onChange={this.onChangeTarefa} placeholder='Inserir tarefa'/>\n          <button onClick={this.aoClicarAdicionar}>Adicionar</button> \n          </ListaContainer> \n          <ContainerDaNovaTarefa>\n          {this.state.arrayTarefas.map((props) => \n          <li><strong>{this.props.valorTarefa}</strong></li>)}\n        </ContainerDaNovaTarefa>\n    </MainContainer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}